stages:
  # Staging is run automatically when master is updated
  # Deletes an existing deployment before installing
  - deploy_staging
  # Production requires a manual trigger
  # Upgrades if already installed
  - deploy_production

variables:
  # Don't use default since we need extra permissions for deployment
  KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: gitlab-runner
  JUPYTERHUB_CHART_VERSION: v0.7-2560dad

deploy_staging:
  stage: deploy_staging
  variables:
    JUPYTERHUB_DEPLOYMENT_NAME: gitlab-jupyterhub-staging
    # Since we're running inside a Kubernetes pod we can use internal DNS
    JUPYTERHUB_URL: http://proxy-public.${JUPYTERHUB_DEPLOYMENT_NAME}/gitlab-test
  image: manics/kube-helm:latest
  before_script:
    - sh deploy/before.sh
    - helm delete --purge $JUPYTERHUB_DEPLOYMENT_NAME || true
  script:
    - >
        sh deploy/deploy.sh
        -f jupyterhub-config.yaml
        -f jupyterhub-staging.yaml
        --set proxy.secretToken=$SECRET_JUPYTERHUB_PROXY_TOKEN
    # TODO: Check we can run singleuser servers
  environment:
    name: staging
    url: https://idr-testing.openmicroscopy.org
  only:
  - master

deploy_production:
  stage: deploy_production
  variables:
    JUPYTERHUB_DEPLOYMENT_NAME: gitlab-jupyterhub
    # Since we're running inside a Kubernetes pod we can use internal DNS
    JUPYTERHUB_URL: http://proxy-public.${JUPYTERHUB_DEPLOYMENT_NAME}/test-public
  image: manics/kube-helm:latest
  before_script:
    - sh deploy/before.sh
  script:
    - >
        sh deploy/deploy.sh
        -f jupyterhub-config.yaml
        --set proxy.secretToken=$SECRET_JUPYTERHUB_PROXY_TOKEN
    # TODO: Check we can run singleuser servers
  environment:
    name: production
    url: https://idr-testing.openmicroscopy.org
  only:
  - master
  when: manual
